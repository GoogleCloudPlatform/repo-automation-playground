# Copyright 2020 Google LLC. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


from typing import List

from ast_parser.core import analyze
from ast_parser.core import cli_list_source_files_datatypes as cli_datatypes
from ast_parser.core.cli_list_source_files_datatypes \
     import ShowTestedFilesOption


# This file contains helper functions for the list_source_files CLI command.


def process_list_source_files(
    invocation: cli_datatypes.ListSourceFilesInvocation
) -> cli_datatypes.ListSourceFilesResult:
    """Compute values displayed in list_source_files

    This method is a helper method that computes the values displayed in
    list_source_files. (Some of the returned values may not be displayed,
    depending on CLI options.)

    Args:
        invocation: A CLI invocation object with the requisite user input.

    Returns:
        A CLI response object with the required processed data.
    """

    grep_tags, source_tags, ignored_tags, source_methods = (
        analyze.analyze_json(invocation.data_json, invocation.root_dir))

    # Ignore methods without region tags
    source_methods = [method for method in source_methods
                      if method['region_tags']]

    any_tested_files = set(
        method['source_path'] for method in source_methods
        if method['test_methods']
    )
    any_untested_files = set(
        method['source_path'] for method in source_methods
        if not method['test_methods']
    )

    all_files = set(method['source_path'] for method in source_methods)

    all_tested_files = [file for file in any_tested_files
                        if file not in any_untested_files]
    not_tested_files = [file for file in any_untested_files
                        if file not in any_tested_files]

    return cli_datatypes.ListSourceFilesResult(
        all_files,
        all_tested_files,
        any_tested_files,
        not_tested_files,
    )


def format_list_source_files(
    invocation: cli_datatypes.ListSourceFilesInvocation,
    result: cli_datatypes.ListSourceFilesResult,
) -> List[str]:
    """Convert computed values for list_source_files into formatted output.

    This method is a helper method that converts the results generated by the
    _process_list_source_files() method into a human-readable list of filepaths
    based on user-specified CLI options.

    Args:
        invocation: A CLI invocation object with the requisite user input.
        result: A CLI response object with the required processed data.

    Returns:
        Human readable output as a list of lines. (This output *does* account
        for annotations in .drift-data.yml files.)
    """

    tested_filter = invocation.show_tested_files
    if tested_filter == ShowTestedFilesOption.ALL_TESTED:
        files = result.all_tested_files
    elif tested_filter == ShowTestedFilesOption.ANY_TESTED:
        files = result.any_tested_files
    elif tested_filter == ShowTestedFilesOption.NOT_TESTED:
        files = result.not_tested_files
    else:
        files = result.all_files

    return files
