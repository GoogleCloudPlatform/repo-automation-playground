# Copyright 2020 Google LLC. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


from typing import List

from ast_parser.core import analyze
from ast_parser.core import cli_list_region_tags_datatypes as cli_datatypes


# This file contains helper functions for the list_region_tags CLI command.


def process_list_region_tags(
    invocation: cli_datatypes.ListRegionTagsInvocation
) -> cli_datatypes.ListRegionTagsResult:
    """Compute values displayed in list_region_tags

    This method is a helper method that computes the values displayed in
    list_region_tags. (Some of the returned values may not be displayed,
    depending on CLI options.)

    Args:
        invocation: A CLI invocation object with the requisite user input.

    Returns:
        A CLI response object with the required processed data.
    """
    def _get_test_count_str(region_tag):
        test_data_matches = [method for method in source_methods if
                             region_tag in method['region_tags']]

        total_tests = 0
        for test_data in test_data_matches:
            total_tests += len(test_data['test_methods'])

        return f'({total_tests} test(s))'

    grep_tags, source_tags, ignored_tags, source_methods = (
        analyze.analyze_json(invocation.data_json, invocation.root_dir))

    test_count_map = {tag: _get_test_count_str(tag) for tag in source_tags}

    undetected_tags = [tag for tag in grep_tags
                       if tag not in source_tags
                       and tag not in ignored_tags]

    return cli_datatypes.ListRegionTagsResult(
        source_methods,
        source_tags,
        undetected_tags,
        ignored_tags,
        test_count_map
    )


def format_list_region_tags(
    invocation: cli_datatypes.ListRegionTagsInvocation,
    result: cli_datatypes.ListRegionTagsResult,
) -> List[str]:
    """Convert computed values for list_region_tags into formatted output.

    This method is a helper method that converts the results generated by the
    _process_list_region_tags() method into human-readable output based on
    user-specified CLI options.

    Args:
        invocation: A CLI invocation object with the requisite user input.
        result: A CLI response object with the required processed data.

    Returns:
        Human readable output as a list of lines.
    """

    output_lines = []
    if invocation.show_undetected and invocation.show_test_counts:
        output_lines.append(
            'WARN Undetected/ignored region tags do not have test counts')

    if invocation.show_detected:
        output_lines.append('Detected region tags:')
        for tag in result.source_tags:
            if invocation.show_test_counts:
                output_lines.append(f'  {tag} {result.test_count_map[tag]}')
            else:
                output_lines.append(f'  {tag}')

            if invocation.show_filenames:
                source_file = [method['source_path']
                               for method in result.source_methods
                               if tag in method['region_tags']][0]
                output_lines.append(f'    Source file: {source_file}')

    if invocation.show_undetected:
        output_lines.append('Undetected region tags:')

        for tag in result.undetected_tags:
            output_lines.append(f'  {tag}')

    if result.ignored_tags:
        output_lines.append('Ignored region tags')
        for tag in result.ignored_tags:
            output_lines.append(f'  {tag}')

    return output_lines
